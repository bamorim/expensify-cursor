// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - extends existing NextAuth model
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    
    // NextAuth relationships
    accounts      Account[]
    sessions      Session[]
    
    // Expense management relationships
    organizationMemberships OrganizationMember[]
    userSpecificPolicies   Policy[] @relation("UserSpecificPolicies")
    expenses               Expense[]
    policyApplications     PolicyApplication[]
    sentInvitations      OrganizationInvitation[] @relation("SentInvitations")
    
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

// Organization model for multi-tenancy
model Organization {
    id          String   @id @default(cuid())
    name        String
    description String?
    slug        String   @unique // URL-friendly identifier
    
    // Relationships
    members     OrganizationMember[]
    categories  ExpenseCategory[]
    policies    Policy[] @relation("OrganizationPolicies")
    expenses    Expense[]
    invitations OrganizationInvitation[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@index([slug])
}

// Organization membership with roles
model OrganizationMember {
    id             String   @id @default(cuid())
    userId         String
    organizationId String
    role           UserRole @default(MEMBER)
    joinedAt       DateTime @default(now())
    
    // Relationships
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    
    @@unique([userId, organizationId])
    @@index([userId])
    @@index([organizationId])
}

// Organization invitations
model OrganizationInvitation {
    id             String   @id @default(cuid())
    email          String
    organizationId String
    invitedBy      String   // User ID of who sent the invitation
    role           UserRole @default(MEMBER)
    status         InvitationStatus @default(PENDING)
    expiresAt      DateTime
    acceptedAt     DateTime?
    
    // Relationships
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    invitedByUser User       @relation("SentInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)
    
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    @@unique([email, organizationId, status])
    @@index([email])
    @@index([organizationId])
    @@index([status])
    @@index([expiresAt])
}

// Invitation status
enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
    CANCELLED
}

// User roles within organizations
enum UserRole {
    ADMIN
    MEMBER
}

// Expense categories (organization-scoped)
model ExpenseCategory {
    id             String   @id @default(cuid())
    name           String
    description    String?
    organizationId String
    
    // Relationships
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    policies     Policy[]
    expenses    Expense[]
    
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    
    @@unique([organizationId, name]) // Prevent duplicate names within org
    @@index([organizationId])
}

// Policy model for expense rules
model Policy {
    id             String       @id @default(cuid())
    name           String
    description    String?
    organizationId String
    categoryId     String
    userId         String?      // null = organization-wide, non-null = user-specific
    
    // Policy rules
    maxAmount      Decimal      @db.Decimal(10, 2)
    period         PolicyPeriod
    requiresReview Boolean      @default(true)
    
    // Relationships
    organization Organization @relation("OrganizationPolicies", fields: [organizationId], references: [id], onDelete: Cascade)
    category     ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    user         User?         @relation("UserSpecificPolicies", fields: [userId], references: [id], onDelete: Cascade)
    policyApplications PolicyApplication[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@index([organizationId, categoryId, userId])
    @@index([userId])
}

// Policy time periods
enum PolicyPeriod {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

// Expense model
model Expense {
    id             String        @id @default(cuid())
    amount         Decimal       @db.Decimal(10, 2)
    description    String
    date           DateTime
    categoryId     String
    userId         String
    organizationId String
    status         ExpenseStatus @default(SUBMITTED)
    
    // Review information
    reviewedBy     String?
    reviewedAt     DateTime?
    reviewComment  String?
    
    // Relationships
    category          ExpenseCategory    @relation(fields: [categoryId], references: [id])
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    policyApplications PolicyApplication[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@index([userId])
    @@index([organizationId])
    @@index([categoryId])
    @@index([status])
    @@index([date])
}

// Expense status
enum ExpenseStatus {
    SUBMITTED
    APPROVED
    REJECTED
    UNDER_REVIEW
}

// Policy application audit trail
model PolicyApplication {
    id             String   @id @default(cuid())
    expenseId      String
    policyId       String
    userId         String
    
    // Application details
    appliedAt      DateTime @default(now())
    decision       PolicyDecision
    reason         String?
    amountChecked  Decimal @db.Decimal(10, 2)
    periodStart    DateTime
    periodEnd      DateTime
    
    // Relationships
    expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
    policy  Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade)
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([expenseId])
    @@index([policyId])
    @@index([userId])
    @@index([appliedAt])
}

// Policy decision types
enum PolicyDecision {
    APPROVED
    REJECTED
    REQUIRES_REVIEW
}

// NextAuth models (keep existing)
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
